// AUTO-GENERATED BY ZENITHKERNEL JSX TYPE GENERATOR
// DO NOT EDIT THIS FILE MANUALLY

import { HydraContext } from "../lib/hydra-runtime";
import { Entity } from "../core/ECSManager";

// ================================================
// ZENITHKERNEL-SPECIFIC TYPE DEFINITIONS
// ================================================

// ================================================
// ZENITHKERNEL BASE TYPES
// ================================================

/** ZenithKernel Hydra context for islands */
export interface HydraProps {
  /** Peer ID for ZK verification */
  peerId?: string;
  /** ZK proof for verification */
  zkProof?: string;
  /** Trust level requirement */
  trustLevel?: "unverified" | "local" | "community" | "verified";
  /** ECS entity binding */
  ecsEntity?: Entity | string;
  /** Manifest URL for remote components */
  manifestUrl?: string;
  /** Additional context data */
  [key: string]: any;
}

/** ZK Gate component props */
export interface ZKGateProps {
  /** Required ZK proof */
  zkProof: string;
  /** Trust level requirement */
  trustLevel?: "verified" | "community";
  /** Fallback content when verification fails */
  fallback?: React.ReactNode;
  /** Children to render when verified */
  children?: React.ReactNode;
}

/** ECS Binder component props */
export interface ECSBinderProps {
  /** Entity ID to bind */
  entityId: Entity | string;
  /** Component types to observe */
  components?: string[];
  /** Auto-create entity if not found */
  autoCreate?: boolean;
  /** Update strategy */
  updateStrategy?: "reactive" | "polling" | "manual";
  /** Children render function */
  children?: (data: Record<string, any>) => React.ReactNode;
}

/** Template component props */
export interface TemplateProps {
  /** ZK proof requirement */
  "zk-proof"?: string;
  /** ZK trust level */
  "zk-trust"?: "unverified" | "local" | "community" | "verified";
  /** ZK entity binding */
  "zk-entity"?: string;
  /** ZK verification strategy */
  "zk-strategy"?: "eager" | "lazy" | "manual";
  /** ECS entity binding */
  "ecs-entity"?: string;
  /** ECS components to observe */
  "ecs-components"?: string | string[];
  /** ECS auto-create entity */
  "ecs-auto-create"?: boolean;
  /** ECS update strategy */
  "ecs-update-strategy"?: "reactive" | "polling" | "manual";
  /** Hydration strategy */
  "hydration-strategy"?: "immediate" | "visible" | "interaction" | "idle" | "manual";
  /** Hydration priority */
  "hydration-priority"?: "high" | "normal" | "low";
  /** Lazy hydration */
  "hydration-lazy"?: boolean;
  /** Hydration trigger */
  "hydration-trigger"?: string;
  /** Hydration debounce */
  "hydration-debounce"?: number;
  /** Template directives */
  "v-if"?: string;
  "v-for"?: string;
  /** Dynamic bindings */
  [key: `:${string}`]: any;
  /** Data attributes */
  [key: `data-${string}`]: any;
  /** Children content */
  children?: React.ReactNode;
}

// ================================================
// ISLAND-SPECIFIC TYPES
// ================================================

/** Props for ECSCounterIsland island */
export interface ECSCounterIslandProps {
  /** Label text for the counter */
  label?: string;
  /** Initial counter value */
  initialValue?: number;
  /** Step size for increment/decrement */
  step?: number;
  /** ECS entity ID to bind to */
  entityId?: string;
  /** ZenithKernel Hydra context */
  context?: HydraContext;
  /** Additional props */
  [key: string]: any;
}

/** Props for HydraStatusIsland island */
export interface HydraStatusIslandProps {
  /** Show action buttons */
  showActions?: boolean;
  /** Refresh interval in milliseconds */
  refreshInterval?: number;
  /** Status items to display */
  statusItems?: Array<{
    label: string;
    value: string;
    status: 'success' | 'warning' | 'error' | 'info';
  }>;
  /** Trust level override */
  trustLevel?: 'unverified' | 'local' | 'community' | 'verified';
  /** ZenithKernel Hydra context */
  context?: HydraContext;
  /** Additional props */
  [key: string]: any;
}

// ================================================
// JSX NAMESPACE EXTENSIONS
// ================================================

declare global {
  namespace JSX {
    interface IntrinsicElements {
      /** ZenithKernel Template wrapper */
      Template: TemplateProps;
      template: TemplateProps;

      /** ZenithKernel Hydra component */
      Hydra: HydraProps;
      hydra: HydraProps;

      /** ZK Gate component for conditional rendering */
      ZKGate: ZKGateProps;
      "zk-gate": ZKGateProps;

      /** ECS Binder component for data binding */
      ECSBinder: ECSBinderProps;
      "ecs-binder": ECSBinderProps;

      /** ECSCounterIsland island component */
      ECSCounterIsland: ECSCounterIslandProps;
      "ecs-counter-island": ECSCounterIslandProps;
      
      /** HydraStatusIsland island component */
      HydraStatusIsland: HydraStatusIslandProps;
      "hydra-status-island": HydraStatusIslandProps;
    }
  }
}

export {};
