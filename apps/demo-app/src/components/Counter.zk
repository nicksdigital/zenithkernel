<template>
  <!-- Counter Dashboard Card -->
  <div class="bg-gray-800/80 backdrop-blur-xl rounded-3xl p-8 shadow-2xl border border-white/10">

    <!-- Header -->
    <div class="flex items-center justify-between mb-8">
      <div class="flex items-center gap-4">
        <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 7h6m0 10v-3m-3 3h.01M9 17h.01M9 14h.01M12 14h.01M15 11h.01M12 11h.01M9 11h.01M7 21h10a2 2 0 002-2V5a2 2 0 00-2-2H7a2 2 0 00-2 2v14a2 2 0 002 2z"/>
        </svg>
      </div>
      <h1 class="text-xl font-semibold text-white">ECS Counter System</h1>
      <svg class="w-6 h-6 text-white cursor-pointer" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"/>
      </svg>
    </div>

    <!-- Main Content Grid -->
    <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">

      <!-- Left Section - Current Value -->
      <div class="space-y-6">
        <div class="text-center">
          <div class="text-7xl font-bold text-white mb-2">{{ count }}</div>
          <p class="text-gray-300 mb-2">Current Value</p>
          <span class="bg-blue-500 text-white text-xs px-3 py-1 rounded-full">Active Counter</span>
        </div>
      </div>

      <!-- Center Section - Progress Ring -->
      <div class="flex flex-col items-center justify-center">
        <div class="text-gray-400 text-sm mb-2">Update Progress</div>
        <div class="relative w-40 h-40 mb-4">
          <svg class="w-full h-full transform -rotate-90" viewBox="0 0 100 100">
            <circle cx="50" cy="50" r="45" stroke="rgba(99,102,241,0.2)" stroke-width="8" fill="none"/>
            <circle cx="50" cy="50" r="45" stroke="#6366f1" stroke-width="8" fill="none"
                    :stroke-dasharray="`${Math.min(updateCount * 10, 283)} 283`" stroke-linecap="round"/>
          </svg>
          <div class="absolute inset-0 flex flex-col items-center justify-center">
            <span class="bg-blue-500 text-white text-xs px-2 py-1 rounded mb-1">UPDATES</span>
          </div>
        </div>
        <div class="text-3xl font-bold text-white">{{ updateCount }}<span class="text-lg">ops</span></div>
        <div class="text-gray-400 text-sm">total operations</div>
      </div>

      <!-- Right Section - Controls -->
      <div>
        <div class="flex items-center justify-between mb-4">
          <h3 class="text-lg font-semibold text-white">Counter Controls</h3>
        </div>
        <div class="space-y-4">
          <button @click="increment" class="w-full flex items-center justify-between py-3 px-4 bg-green-500 hover:bg-green-600 rounded-xl transition-all duration-200 hover:scale-102">
            <div class="flex items-center gap-3">
              <div class="w-6 h-6 bg-white/20 rounded flex items-center justify-center text-xs font-bold">+</div>
              <span class="text-sm font-semibold text-white">Increment</span>
            </div>
            <svg class="w-4 h-4 text-white" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M3.293 9.707a1 1 0 010-1.414l6-6a1 1 0 011.414 0l6 6a1 1 0 01-1.414 1.414L11 5.414V17a1 1 0 11-2 0V5.414L4.707 9.707a1 1 0 01-1.414 0z" clip-rule="evenodd"/>
            </svg>
          </button>

          <button @click="decrement" class="w-full flex items-center justify-between py-3 px-4 bg-red-500 hover:bg-red-600 rounded-xl transition-all duration-200 hover:scale-102">
            <div class="flex items-center gap-3">
              <div class="w-6 h-6 bg-white/20 rounded flex items-center justify-center text-xs font-bold">âˆ’</div>
              <span class="text-sm font-semibold text-white">Decrement</span>
            </div>
            <svg class="w-4 h-4 text-white" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M16.707 10.293a1 1 0 010 1.414l-6 6a1 1 0 01-1.414 0l-6-6a1 1 0 111.414-1.414L9 14.586V3a1 1 0 012 0v11.586l4.293-4.293a1 1 0 011.414 0z" clip-rule="evenodd"/>
            </svg>
          </button>

          <button @click="reset" class="w-full flex items-center justify-between py-3 px-4 border border-white/20 bg-transparent hover:bg-white/10 rounded-xl transition-all duration-200 hover:scale-102">
            <div class="flex items-center gap-3">
              <div class="w-6 h-6 bg-white/20 rounded flex items-center justify-center text-xs font-bold">R</div>
              <span class="text-sm font-semibold text-gray-300">Reset</span>
            </div>
            <svg class="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"/>
            </svg>
          </button>
        </div>
      </div>
    </div>
  </div>
</template>

<script>
import { ref } from '@core/signals';

// Simple ZK Component
const Counter = {
  name: 'Counter',

  setup() {
    // Simple reactive state using ref()
    const count = ref(0);
    const updateCount = ref(0);

    // Methods using simple state updates
    const increment = () => {
      count.value++;
      updateCount.value++;
    };

    const decrement = () => {
      count.value--;
      updateCount.value++;
    };

    const reset = () => {
      count.value = 0;
      updateCount.value++;
    };

    return {
      count,
      updateCount,
      increment,
      decrement,
      reset
    };
  }
};

// Export ECS Component for kernel registration (separate from ZK component)
export function CounterComponent(data = {}) {
  return {
    type: 'Counter',
    value: data.value || 0,
    increment() { this.value++; },
    decrement() { this.value--; },
    reset() { this.value = 0; }
  };
}

export default Counter;
</script>

<style>
.counter-component {
  max-width: 400px;
  margin: 0 auto;
  padding: 20px;
  border: 1px solid #e0e0e0;
  border-radius: 8px;
  background: #f9f9f9;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
}

.counter-display {
  text-align: center;
  margin-bottom: 20px;
}

.counter-display h3 {
  margin: 0 0 15px 0;
  color: #333;
  font-size: 1.2em;
}

.counter-value {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 10px;
  margin-bottom: 10px;
}

.counter-value .value {
  font-size: 2.5em;
  font-weight: bold;
  color: #7c3aed;
}

.counter-value .step-info {
  font-size: 0.9em;
  color: #666;
}

.constraints {
  display: flex;
  gap: 15px;
  justify-content: center;
  font-size: 0.9em;
  color: #666;
  margin-bottom: 10px;
}

.status-indicators {
  display: flex;
  gap: 10px;
  justify-content: center;
  margin-bottom: 15px;
}

.status {
  padding: 4px 8px;
  border-radius: 4px;
  font-size: 0.8em;
  font-weight: bold;
}

.status.at-min {
  background: #fee2e2;
  color: #dc2626;
}

.status.at-max {
  background: #fef3c7;
  color: #d97706;
}

.counter-controls {
  display: flex;
  gap: 10px;
  justify-content: center;
  margin-bottom: 20px;
}

.btn {
  padding: 10px 20px;
  border: none;
  border-radius: 6px;
  font-size: 1.1em;
  font-weight: bold;
  cursor: pointer;
  transition: all 0.2s ease;
}

.btn:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

.btn-increment {
  background: #10b981;
  color: white;
}

.btn-increment:hover:not(:disabled) {
  background: #059669;
}

.btn-decrement {
  background: #ef4444;
  color: white;
}

.btn-decrement:hover:not(:disabled) {
  background: #dc2626;
}

.btn-reset {
  background: #6b7280;
  color: white;
}

.btn-reset:hover {
  background: #4b5563;
}

.advanced-controls {
  display: flex;
  gap: 15px;
  justify-content: center;
  margin-bottom: 20px;
}

.control-group {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 5px;
}

.control-group label {
  font-size: 0.9em;
  color: #666;
  font-weight: 500;
}

.step-input,
.value-input {
  width: 80px;
  padding: 6px;
  border: 1px solid #d1d5db;
  border-radius: 4px;
  text-align: center;
  font-size: 0.9em;
}

.component-info {
  border-top: 1px solid #e0e0e0;
  padding-top: 15px;
  display: flex;
  justify-content: space-between;
  font-size: 0.9em;
}

.info-item {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 2px;
}

.info-item .label {
  color: #666;
  font-weight: 500;
}

.info-item .value {
  color: #333;
  font-weight: bold;
}

@media (max-width: 480px) {
  .counter-component {
    padding: 15px;
  }
  
  .advanced-controls {
    flex-direction: column;
    gap: 10px;
  }
  
  .component-info {
    flex-direction: column;
    gap: 10px;
  }
}
</style>
