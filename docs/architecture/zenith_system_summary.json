{
  "zenith_system": {
    "overview": "Zenith is a comprehensive system with Hydras as a frontend component that overwrites the React JSX rendering pipeline. It's built on a microkernel architecture with an Entity Component System (ECS) at its core.",
    "core_components": {
      "kernel": {
        "description": "The primary bootstrapping and lifecycle management engine of the ZenithCore framework",
        "responsibilities": [
          "Boot and configure ECS state",
          "Register all system modules",
          "Initialize Hydra components, ZK stack, networking layer",
          "Hook kernel update loop (tick/frame/interval mode)",
          "Provide introspection and diagnostic surface"
        ],
        "file_path": "core/ZenithKernel.ts"
      },
      "ecs": {
        "description": "The foundational module implementing a modular, performant Entity Component System runtime",
        "integrations": [
          "ZK-trust scoring (TrustOracle)",
          "Quantum consensus vectors (OptimizedPOBPC)",
          "qDHT entity broadcasting",
          "Hydra component auto-refreshing"
        ],
        "core_functions": [
          "createEntity()",
          "addComponent(entityId, componentKey, componentData)",
          "removeComponent(entityId, componentKey)",
          "getComponent(entityId, componentKey)"
        ],
        "file_path": "core/modules/ECS.ts"
      },
      "wasm_module_proxy": {
        "description": "Handles secure, isolated execution of WebAssembly modules within the ZenithCore microkernel environment",
        "responsibilities": [
          "Instantiate and manage WASM modules safely",
          "Provide WASI-like interface for memory and I/O",
          "Bridge ECS data/state access to WASM-bound functions",
          "Enforce ZK attestation prior to module registration",
          "Enable hot-swapping and memory sandbox enforcement"
        ],
        "security_features": [
          "ZKP hash check ensures tamper-proofed WASM",
          "Only OST-signed modules can be registered",
          "Memory access sandboxed per module",
          "Runtime invocation limited to predefined exports"
        ],
        "file_path": "core/runtime/WasmModuleProxy.ts"
      },
      "wasm_loader": {
        "description": "Responsible for loading, instantiating, and validating WASM modules in the ZenithCore kernel",
        "responsibilities": [
          "Load WASM binary from a manifest-defined entry",
          "Bind runtime interfaces (ECS, logging, messaging)",
          "Instantiate in sandboxed environment",
          "Verify OST signature and zk hash if required",
          "Enable host-WASM interop with safe memory models"
        ],
        "security_features": [
          "Manifest signature required (ManifestAuth)",
          "Optional zkProof hash match check (via qzkp)",
          "Memory isolation: no access to global ECS directly",
          "Strict entry/export policy per manifest"
        ],
        "file_path": "src/runtime/WasmLoader.ts"
      },
      "distributed_module_loader": {
        "description": "Enables decentralized discovery and retrieval of system or component manifests and bundles over the ZenithCore network",
        "responsibilities": [
          "Discover manifest or module metadata via qDHT",
          "Fetch and validate bundles from distributed stores",
          "Support fallback to signed OST or cache layers",
          "Enable offline-first rehydration for trusted components"
        ],
        "capabilities": [
          "Live rehydration of UI or logic bundles",
          "Registry fallback hierarchy: cache → OST → qDHT",
          "Auto-verification using ManifestAuth and zk snapshot metadata"
        ],
        "file_path": "src/runtime/DistributedModuleLoader.ts"
      },
      "manifest_auth": {
        "description": "Manages the cryptographic validation and signing of OST manifests in the ZenithCore runtime",
        "responsibilities": [
          "Digitally sign manifest objects",
          "Verify existing manifest signatures",
          "Encode signer metadata (fingerprint, version, timestamp)",
          "Optionally hash for zk validation in proofs"
        ],
        "signature_format": {
          "_signedBy": "0xABC123...",
          "_signature": "MEUCIG5...",
          "_ts": "2025-05-23T12:00:00Z"
        },
        "integrations": [
          "Called by CLI tools: sign-manifest.ts, quantum-sign.ts",
          "Used in bootstrapKernel.ts for manifest validation",
          "Compatible with WasmLoader, HydraLoader, SystemManager"
        ],
        "file_path": "src/security/ManifestAuth.ts"
      },
      "manifest_generator": {
        "description": "Responsible for assembling structured, OST-compatible manifest definitions from dynamic or static inputs",
        "responsibilities": [
          "Assemble manifest structure from input options",
          "Apply standard fields (id, entry, execType, version)",
          "Embed signing requirements or zk metadata",
          "Return a JSON object ready for signing or distribution"
        ],
        "output_format_example": {
          "id": "HydraDashboard",
          "entry": "HydraDashboard.tsx",
          "execType": "edge",
          "zkRequirement": true,
          "version": "1.0.0",
          "dependencies": []
        },
        "use_cases": [
          "CLI: create-hydra, create-module, init",
          "Web IDEs or admin tools for Hydra generation",
          "Signing pipelines and dev tool integrations"
        ],
        "file_path": "src/utils/ManifestGenerator.ts"
      },
      "challenge_system": {
        "description": "Handles cryptographic challenges to prove identity, authorization, or capability in decentralized environments",
        "responsibilities": [
          "Generate or verify proof-of-access challenges",
          "Track active and expired challenge sessions",
          "Interface with qzkp verifier or registry zk circuits",
          "Serve as an authorization oracle for runtime components"
        ],
        "challenge_format": {
          "id": "challenge123",
          "entity": "peer0xabc",
          "circuit": "zkAuthV1",
          "expiresAt": 1682103495
        },
        "integration_points": [
          "HydraLoader for proof-based activation",
          "login-zk.ts for user auth",
          "RegistryServer for peer identity validation",
          "TrustOracleSystem to bind challenge score gating"
        ],
        "file_path": "src/modules/RegistryServer/ChallengeSystem.ts"
      },
      "registry_server": {
        "description": "Manages the decentralized identity and module registry logic for the ZenithCore runtime",
        "responsibilities": [
          "Host a distributed registry of Hydra/System manifests",
          "Authenticate and index entities using ZK and OST-backed credentials",
          "Serve discovery, challenge issuance, and verification endpoints",
          "Optionally act as a public zk gateway for clients"
        ],
        "registry_record_schema": {
          "entity": "peer:0xABCD...",
          "hydras": ["HydraTrustBar", "HydraDashboard"],
          "pubkey": "...",
          "roles": ["viewer", "moderator"],
          "zkAnchor": "zk-auth-v1"
        },
        "security_features": [
          "zkProof-bound record resolution",
          "Role-based access grants",
          "Challenge verification replay protection"
        ],
        "file_path": "src/modules/RegistryServer/RegistryServer.ts"
      },
      "verify_system": {
        "description": "Responsible for verifying zero-knowledge proofs associated with Hydra components, registry identities, and system authentication events",
        "responsibilities": [
          "Accept proof verification requests from kernel modules or Hydra lifecycles",
          "Check zkProofs against the QZKP verifier",
          "Emit verification status into ECS or trust registries",
          "Manage verifier configuration, versions, and cache"
        ],
        "verifier_types": [
          "Local WASM verifier (in-kernel)",
          "zkVM-based verifier (offloaded)",
          "Remote QZKP proof broker (e.g., zkRollup node)",
          "Precompiled Rust ZK validator"
        ],
        "use_cases": [
          "HydraLoader.tsx → verifies zkProof before hydration",
          "RegistryServer.ts → validates identity claims",
          "ChallengeSystem.ts → binds response verification to on-chain/off-chain circuits",
          "ZK role-based access control and gating"
        ],
        "file_path": "src/modules/RegistryServer/VerifySystem.ts"
      },
      "http_bridge": {
        "description": "Provides a bridge between HTTP REST interfaces and internal ECS or system operations in ZenithCore",
        "responsibilities": [
          "Map HTTP routes to system methods or ECS mutations",
          "Serialize input and output between JSON and ECS",
          "Optionally support REST, RPC, or GraphQL extensions",
          "Authenticate requests via zkProof or OST-based tokens"
        ],
        "key_bindings": {
          "POST /ecs/:entity/components/:key": "Adds or updates a component on an entity",
          "GET /ecs/:entity/components/:key": "Fetches current state of a component",
          "POST /hydra/register": "Registers a Hydra manifest or status with the kernel",
          "POST /verify": "Submits a zkProof to be validated by the system"
        },
        "auth_modes": [
          "OST tokens",
          "zkProof headers (x-zkp-claim)",
          "Basic developer mode (?devMode=true)"
        ],
        "file_path": "src/adapters/HttpBridge.ts"
      },
      "kernel_router": {
        "description": "Defines the routing logic for incoming HTTP requests in the ZenithCore kernel",
        "responsibilities": [
          "Match incoming HTTP routes to kernel handler functions",
          "Normalize request and response data",
          "Authenticate and authorize incoming requests",
          "Register handler groups for ECS, Hydra, and ZK services"
        ],
        "routing_patterns": {
          "ECS Endpoints": [
            "router.post('/ecs/:entity/components/:key', handleSetComponent)",
            "router.get('/ecs/:entity/components/:key', handleGetComponent)"
          ],
          "Hydra Management": [
            "router.post('/hydra/register', handleHydraManifest)",
            "router.get('/hydra/list', handleListHydras)"
          ],
          "ZK and Trust": [
            "router.post('/verify', handleProofVerification)",
            "router.post('/challenge', handleZKChallenge)"
          ]
        },
        "middleware_hooks": [
          "authenticateZK() – Validates zkProofs via VerifySystem",
          "authorizeByRole() – Checks peer or token roles",
          "logRouteCall() – Metrics + dev diagnostics"
        ],
        "file_path": "src/adapters/KernelRouter.ts"
      },
      "expose_rest_decorator": {
        "description": "A decorator that exposes class methods as RESTful endpoints in the ZenithCore runtime",
        "responsibilities": [
          "Decorate system or module methods to register them as REST endpoints",
          "Define HTTP method (GET, POST, etc.), path, and auth metadata",
          "Automatically inject route into runtime router"
        ],
        "decorator_options": {
          "method": "HTTP method (e.g., POST, GET)",
          "path": "REST path relative to base",
          "auth": "Auth requirement (role, zkProof)",
          "tags": "Optional grouping tags (docs/UI)"
        },
        "usage_example": "@ExposeRest({ method: 'POST', path: '/ecs/:id' })",
        "file_path": "src/decorators/ExposeRest.ts"
      },
      "http_route_decorator": {
        "description": "A decorator that marks a function as a handler for a specific HTTP route within the ZenithCore routing system",
        "responsibilities": [
          "Attach metadata to functions for HTTP exposure",
          "Register route handlers with exact method/path signatures",
          "Allow ECS or kernel operations to become accessible externally"
        ],
        "decorator_signature": "HttpRoute(method: 'GET' | 'POST' | 'PUT' | 'DELETE', path: string): MethodDecorator",
        "integration_points": [
          "Used by KernelRouter.ts to bind handlers",
          "May be layered with @ValidateBody() or @Authorize()",
          "Forms the backbone of dev/admin APIs"
        ],
        "file_path": "src/decorators/HttpRoute.ts"
      },
      "system_component_decorator": {
        "description": "A utility decorator used to bind ECS component types to specific systems in the ZenithCore runtime",
        "responsibilities": [
          "Declare system-specific component contracts",
          "Annotate data types used in ECS world per system",
          "Register schemas for developer tools and runtime engines",
          "Optionally validate ECS data before mutation"
        ],
        "decorator_signature": "SystemComponent(name: string): ClassDecorator",
        "usage_example": "@SystemComponent('TrustScore')\nexport interface TrustScore {\n  value: number;\n  decay: number;\n}",
        "integration_points": [
          "ECSManager for schema initialization",
          "Dev tools like ECSViewer.tsx",
          "BaseSystem implementations using getComponent() calls"
        ],
        "file_path": "src/decorators/SystemComponent.ts"
      },
      "register_system_decorator": {
        "description": "A decorator used to automatically register ECS-based systems into the ZenithCore kernel",
        "responsibilities": [
          "Tag system classes for runtime registration",
          "Hook into LoadAllSystems.ts or bootstrapKernel.ts",
          "Ensure systems are loaded in the correct priority lane",
          "Optionally associate metadata (e.g., execution tags)"
        ],
        "decorator_options": {
          "lane": "Scheduler lane (realTime, async, etc.)",
          "name": "System identifier name",
          "tags": "Optional system capabilities or roles"
        },
        "usage_example": "@RegisterSystem({ lane: 'realTime', name: 'TrustOracleSystem' })\nexport class TrustOracleSystem extends BaseSystem {\n  update(world, delta) {\n    // ...\n  }\n}",
        "integration_points": [
          "bootstrapKernel.ts",
          "LoadAllSystems.ts",
          "SystemManager.register(...)"
        ],
        "file_path": "src/decorators/RegisterSystem.ts"
      },
      "validate_body_decorator": {
        "description": "A decorator used to validate HTTP request bodies for REST endpoints in the ZenithCore runtime",
        "responsibilities": [
          "Attach a schema or validation function to an HTTP route",
          "Automatically reject malformed or missing input",
          "Improve DX and trustworthiness for system-level APIs"
        ],
        "usage_example": "@HttpRoute('POST', '/register')\n@ValidateBody({\n  id: 'string',\n  entry: 'string',\n  execType: 'string'\n})\npublic registerHydra(req) {\n  return this.systemManager.registerManifest(req.body);\n}",
        "supported_schema_types": [
          "Object schemas (string, number, boolean)",
          "Required vs optional fields",
          "Custom validator functions"
        ],
        "rejection_behavior": [
          "Sends 400 Bad Request if validation fails",
          "Logs reason and caller metadata (if debugging enabled)"
        ],
        "use_cases": [
          "API surface for HydraLoader, RegistryServer, ManifestAuth",
          "Developer extensions and CLI WebSocket relays",
          "ECS mutation APIs"
        ],
        "file_path": "src/decorators/ValidateBody.ts"
      }
    },
    "hydra_components": {
      "description": "Decentralized UI components that replace traditional 'islands', independently instantiable, optionally edge-executable, and tied to distributed ECS state and zk-verifiable context",
      "file_locations": {
        "HydraLoader": "src/components/hydra/HydraLoader.tsx",
        "HydraTrustBar": "src/components/hydra/HydraTrustBar.tsx",
        "HydraDashboard": "src/components/hydra/HydraDashboard.tsx",
        "CLI": "src/cli/zenith-cli.ts",
        "Hooks": [
          "src/hooks/useHydraEvents.ts",
          "src/hooks/useHydraRegistry.ts"
        ],
        "Runtime": "src/lib/hydra-runtime.ts",
        "Manifests": "src/manifests/hydras/[id]/manifest.json"
      },
      "lifecycle": [
        "Use createHydra() CLI to scaffold a manifest",
        "Build component with ECS + zk context support",
        "Publish manifest under manifests/hydras/[id]",
        "Instantiate component with <Hydra ... />",
        "Updates auto-refresh via ECS/qDHT",
        "Use HydraDashboard to track status"
      ]
    },
    "cli_tools": {
      "init": {
        "description": "Bootstraps a new ZenithCore project environment",
        "responsibilities": [
          "Scaffold the core folder structure for a ZenithCore-compatible project",
          "Initialize config files like .zenith/config.json",
          "Offer to generate example systems, hydras, or test WASM modules",
          "Register local trust keys or developer identity"
        ],
        "flags": {
          "--template": "Scaffold a pre-built app or example",
          "--key": "Link developer key or wallet",
          "--force": "Overwrite existing files"
        },
        "file_path": "cli/commands/init.ts"
      },
      "create-hydra": {
        "description": "Scaffolds a new Hydra component by generating its manifest and optionally signing it",
        "workflow": "Creates directory structure, writes JSON manifest, uses OST utilities to cryptographically sign the manifest",
        "manifest_example": {
          "id": "HydraTrustBar",
          "entry": "HydraTrustBar.tsx",
          "execType": "edge",
          "zkRequirement": true,
          "version": "1.0.0",
          "dependencies": ["react", "@zenithkernel/hydra-core"]
        },
        "file_path": "cli/commands/create-hydra.ts"
      },
      "quantum-sign": {
        "description": "Post-quantum signing utility for digitally signing manifests, proofs, or Hydra bundles",
        "algorithms": {
          "kyber512": "Hybrid encryption + signature",
          "dilithium3": "Fast lattice-based signature",
          "falcon512": "Efficient ZK-compatible signature"
        },
        "file_path": "cli/utils/quantum-sign.ts"
      }
    },
    "ost_compression": {
      "description": "Implementation of the Okaily-Srivastava-Tbakhi (OST) compression algorithm with ZSTD integration for BitTorrent-like transfer of bundles",
      "features": [
        "Adaptive window sizing",
        "Parallel processing",
        "Memory optimization",
        "Streaming support",
        "Multiple compression methods (huffman, zstd, raw)"
      ],
      "configuration_options": {
        "windowLength": "Length of data windows for processing (default: 1000)",
        "labelLength": "Length of labels for bins (default: 4)",
        "variableWindow": "Whether to use variable-sized windows (default: false)",
        "adaptiveWindow": "Whether to adapt window size based on data (default: false)",
        "compressionMethod": "Method to use for compression (default: 'huffman')",
        "subBinning": "Whether to apply nested binning for better compression (default: false)",
        "parallelProcessing": "Whether to use parallel processing (default: false)",
        "maxWorkers": "Maximum number of parallel workers (default: 4)"
      },
      "file_path": "runtime/codec/OSTCompression.ts"
    },
    "network_dynamics": {
      "description": "Zenith's network architecture for distributed components",
      "features": [
        "Hydras broadcast metadata via qDHT",
        "zkProofs verified locally or remotely",
        "Trust scores feed UI gating + logic",
        "OST ensures manifest security",
        "Offline-first design with gossip registry"
      ]
    },
    "future_extensions": [
      "HydraShards (sub-component hydration)",
      "zkRollback (auto-invalidate state)",
      "WASM rendering pipeline",
      "Devtools integration for zkProof tests",
      "Incentive-based trust gating"
    ]
  }
}
