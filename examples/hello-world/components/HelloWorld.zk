<template>
  <!-- Hello World SFC Component -->
  <div class="max-w-4xl mx-auto animate-fade-in">
    <!-- Hero Card -->
    <div class="glass-effect rounded-3xl shadow-2xl p-8 md:p-12 text-center">
      <!-- Header -->
      <div class="mb-8 animate-slide-up">
        <h1 class="text-5xl md:text-7xl font-bold text-gray-800 dark:text-white mb-4">
          Hello, <span class="text-zenith-500 animate-pulse-slow">{{ userName || 'World' }}</span>! üëã
        </h1>
        <p class="text-xl md:text-2xl text-gray-600 dark:text-gray-300 mb-6">
          Welcome to <strong class="text-zenith-600">ZenithKernel</strong> - The Future of Web Development
        </p>
      </div>

      <!-- Feature Cards -->
      <div class="grid md:grid-cols-3 gap-6 mb-8">
        <!-- Signal System -->
        <div class="bg-white/50 dark:bg-gray-800/50 rounded-xl p-6 hover:scale-105 transition-transform duration-300">
          <div class="text-3xl mb-3">‚ö°</div>
          <h3 class="text-lg font-semibold text-gray-800 dark:text-white mb-2">Signal System</h3>
          <p class="text-gray-600 dark:text-gray-300 text-sm">
            Reactive state management without virtual DOM overhead
          </p>
        </div>

        <!-- ECS Architecture -->
        <div class="bg-white/50 dark:bg-gray-800/50 rounded-xl p-6 hover:scale-105 transition-transform duration-300">
          <div class="text-3xl mb-3">üèóÔ∏è</div>
          <h3 class="text-lg font-semibold text-gray-800 dark:text-white mb-2">ECS Architecture</h3>
          <p class="text-gray-600 dark:text-gray-300 text-sm">
            Entity-Component-System for scalable applications
          </p>
        </div>

        <!-- ZK Verification -->
        <div class="bg-white/50 dark:bg-gray-800/50 rounded-xl p-6 hover:scale-105 transition-transform duration-300">
          <div class="text-3xl mb-3">üîí</div>
          <h3 class="text-lg font-semibold text-gray-800 dark:text-white mb-2">ZK Verification</h3>
          <p class="text-gray-600 dark:text-gray-300 text-sm">
            Zero-knowledge proofs for enhanced security
          </p>
        </div>
      </div>

      <!-- Interactive Section -->
      <div class="bg-white/30 dark:bg-gray-800/30 rounded-2xl p-6 mb-8">
        <h3 class="text-2xl font-bold text-gray-800 dark:text-white mb-4">
          Interactive Demo
        </h3>
        
        <!-- Counter -->
        <div class="flex items-center justify-center space-x-4 mb-6">
          <button
            type="button"
            @click="decrementCounter()"
            class="bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-4 rounded-full transition-colors duration-200 shadow-lg hover:shadow-xl"
          >
            -
          </button>
          <div class="text-3xl font-bold text-gray-800 dark:text-white min-w-[60px]">
            {{ counter }}
          </div>
          <button
            type="button"
            @click="incrementCounter()"
            class="bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded-full transition-colors duration-200 shadow-lg hover:shadow-xl"
          >
            +
          </button>
        </div>

        <!-- Name Input -->
        <div class="max-w-md mx-auto">
          <label class="block text-gray-700 dark:text-gray-300 text-sm font-bold mb-2">
            What's your name?
          </label>
          <input 
            type="text" 
            placeholder="Enter your name..." 
            @input="updateUserName($event.target.value)"
            v-model="userName"
            class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-zenith-500 focus:border-transparent bg-white/80 dark:bg-gray-700/80 dark:border-gray-600 dark:text-white"
          />
        </div>
      </div>

      <!-- Status Information -->
      <div class="grid md:grid-cols-2 gap-4 text-left">
        <!-- System Status -->
        <div class="bg-green-100 dark:bg-green-900/30 border border-green-200 dark:border-green-700 rounded-lg p-4">
          <h4 class="font-semibold text-green-800 dark:text-green-300 mb-2">‚úÖ System Status</h4>
          <ul class="text-sm text-green-700 dark:text-green-400 space-y-1">
            <li>‚Ä¢ Template Engine: Active</li>
            <li>‚Ä¢ Signal System: {{ signalStatus }}</li>
            <li>‚Ä¢ ECS Manager: {{ ecsStatus }}</li>
            <li>‚Ä¢ Render Count: {{ renderCount }}</li>
          </ul>
        </div>

        <!-- Performance Metrics -->
        <div class="bg-blue-100 dark:bg-blue-900/30 border border-blue-200 dark:border-blue-700 rounded-lg p-4">
          <h4 class="font-semibold text-blue-800 dark:text-blue-300 mb-2">üìä Performance</h4>
          <ul class="text-sm text-blue-700 dark:text-blue-400 space-y-1">
            <li>‚Ä¢ Load Time: {{ loadTime }}ms</li>
            <li>‚Ä¢ Memory Usage: Optimized</li>
            <li>‚Ä¢ Bundle Size: Minimal</li>
            <li>‚Ä¢ Hydration: {{ hydrationStatus }}</li>
          </ul>
        </div>
      </div>

      <!-- Footer -->
      <div class="mt-8 pt-6 border-t border-gray-200 dark:border-gray-700">
        <p class="text-gray-600 dark:text-gray-400 text-sm">
          Built with ‚ù§Ô∏è using <strong>ZenithKernel</strong> ‚Ä¢ 
          <span class="text-zenith-600">{{ currentYear }}</span>
        </p>
      </div>
    </div>
  </div>
</template>

<script>
export default {
  name: 'HelloWorld',

  // Reactive signals (using our simple signal implementation)
  signals: {
    userName: signal(''),
    counter: signal(0),
    renderCount: signal(1),
    startTime: signal(Date.now())
  },

  // Computed values
  computed: {
    currentYear: computed(() => new Date().getFullYear()),
    loadTime: computed(() => 50), // Simple static value for now
    signalStatus: computed(() => 'Active'),
    ecsStatus: computed(() => 'Ready'),
    hydrationStatus: computed(() => 'Complete')
  },

  // Component methods
  methods: {
    incrementCounter() {
      this.signals.counter.value++;
      this.signals.renderCount.value++;
    },

    decrementCounter() {
      this.signals.counter.value = Math.max(0, this.signals.counter.value - 1);
      this.signals.renderCount.value++;
    },

    updateUserName(name) {
      this.signals.userName.value = name.trim();
      this.signals.renderCount.value++;
    },

    reset() {
      this.signals.userName.value = '';
      this.signals.counter.value = 0;
      this.signals.renderCount.value = 0;
    }
  },

  // Lifecycle hooks
  mounted() {
    console.log('üéâ HelloWorld component mounted!');
    this.signals.renderCount.value++;
  },

  unmounted() {
    console.log('üëã HelloWorld component unmounted!');
  }
};
</script>

<style scoped>
/* Component-specific styles */
.glass-effect {
  backdrop-filter: blur(16px) saturate(180%);
  -webkit-backdrop-filter: blur(16px) saturate(180%);
  background-color: rgba(255, 255, 255, 0.75);
  border: 1px solid rgba(209, 213, 219, 0.3);
}

.dark .glass-effect {
  background-color: rgba(17, 24, 39, 0.75);
  border: 1px solid rgba(75, 85, 99, 0.3);
}

/* Custom animations */
@keyframes fadeIn {
  from { opacity: 0; }
  to { opacity: 1; }
}

@keyframes slideUp {
  from { 
    transform: translateY(20px); 
    opacity: 0; 
  }
  to { 
    transform: translateY(0); 
    opacity: 1; 
  }
}

.animate-fade-in {
  animation: fadeIn 0.5s ease-in-out;
}

.animate-slide-up {
  animation: slideUp 0.6s ease-out;
}

.animate-pulse-slow {
  animation: pulse 3s cubic-bezier(0.4, 0, 0.6, 1) infinite;
}

/* Hover effects */
.hover\:scale-105:hover {
  transform: scale(1.05);
}

/* Focus states */
.focus\:ring-zenith-500:focus {
  --tw-ring-color: #0ea5e9;
}
</style>
